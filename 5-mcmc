# Package manager
library(pacman)
p_load(
  patchwork, ggtree, ape, phytools, dplyr, readxl, stringr, viridis,
  reshape2, cowplot, ggthemes, ggimage, RColorBrewer, scales, forcats,
  readr, caper, yhat, ggrepel, GGally, MCMCglmm, purrr
)

# Phylogenetic comparative analysis helpers
source("/raid6/bird/hp/mcmcglmm/martin.R")

## What this script does:
# - Fit MCMCglmm models for Harm_mean_Ne with life-history/ecological predictors
# - Include multiple random effects (tip_label + sequencing/mapping/missing metrics)
# - Save fitted models, diagnostics, plots, and beta summaries

# Toggles
modeling    <- TRUE
save_models <- TRUE
plotting    <- TRUE
save_plots  <- TRUE

setwd("/raid6/bird/hp/mcmcglmm/Harm_mean_Ne")

# Load (modified) phylogeny
# note: “26 species from 10ktrees plus 3 subspecies of ringed seal” in original comment
tree_final <- read.tree("/raid6/bird/hp/mcmcglmm/tree.newick")

# Data for modeling
all_stats <- as.data.frame(readr::read_csv("all_data.csv"))

# Construct inverse phylogenetic matrix and priors
inv_phylo <- inverseA(tree_final, nodes = "TIPS", scale = FALSE)$Ainv
prior <- list(
  G = list(
    G1 = list(V = 1, nu = 0.002),  # tip_label
    G2 = list(V = 1, nu = 0.002),  # Sequencing_depth
    G3 = list(V = 1, nu = 0.002),  # Mapping_rate
    G4 = list(V = 1, nu = 0.002)   # Missing_rate
  ),
  R = list(V = 1, nu = 0.002)
)

# =========================================
# Standardization and variable transforms
# =========================================
stats_mod_genlh <- all_stats %>%
  mutate(
    # standardize by 2*SD to make coefficients comparable (Gelman 2008; Schielzeth 2014)
    Centroid_Latitude = (Centroid_Latitude - mean(Centroid_Latitude, na.rm = TRUE)) / (2 * sd(Centroid_Latitude, na.rm = TRUE)),
    Mass              = (Mass              - mean(Mass,              na.rm = TRUE)) / (2 * sd(Mass,              na.rm = TRUE)),
    Migration         = (Migration         - mean(Migration,         na.rm = TRUE)) / (2 * sd(Migration,         na.rm = TRUE)),
    Trophic_Level     = (Trophic_Level     - mean(Trophic_Level,     na.rm = TRUE)) / (2 * sd(Trophic_Level,     na.rm = TRUE)),
    Primary_Lifestyle = (Primary_Lifestyle - mean(Primary_Lifestyle, na.rm = TRUE)) / (2 * sd(Primary_Lifestyle, na.rm = TRUE)),
    Range_Size        = (Range_Size        - mean(Range_Size,        na.rm = TRUE)) / (2 * sd(Range_Size,        na.rm = TRUE))
  )

# =================
# MCMC settings
# =================
nitt   <- 110000
burnin <- 10000
thin   <- 100

# -------------------------------------------------------
# Model wrapper
# -------------------------------------------------------
run_mod <- function(iter){
  MCMCglmm(
    Harm_mean_Ne ~ Centroid_Latitude + Mass + Migration + Range_Size + Trophic_Level + Primary_Lifestyle,
    random   = ~ tip_label + Sequencing_depth + Mapping_rate + Missing_rate,
    nodes    = "TIPS",
    family   = "gaussian",
    ginverse = list(tip_label = inv_phylo),
    prior    = prior,
    data     = stats_mod_genlh,
    nitt     = nitt, burnin = burnin, thin = thin
  )
}

# Ensure output directories exist
if (!dir.exists("output/mcmcmodels")) dir.create("output/mcmcmodels", recursive = TRUE)
if (!dir.exists("output/plots"))      dir.create("output/plots",      recursive = TRUE)
if (!dir.exists("output"))            dir.create("output",            recursive = TRUE)

# Model name and cache file
mod_name        <- "gendiv_vs_lh_plus_bot"
model_file_name <- paste0(mod_name, ".RData")

# Run or load models
if (!file.exists(file.path("output/mcmcmodels", model_file_name))){
  set.seed(1234)
  models <- purrr::map(1:3, run_mod)
  saveRDS(models, file = file.path("output/mcmcmodels", model_file_name))
}

models    <- readr::read_rds(file.path("output/mcmcmodels", model_file_name))
mod_genlh <- models[[1]]

# ============================
# Diagnostics
# ============================
# Chain diagnostics across 3 runs
plot(mcmc.list(models[[1]]$Sol, models[[2]]$Sol, models[[3]]$Sol))
gelman.diag(mcmc.list(models[[1]]$Sol, models[[2]]$Sol, models[[3]]$Sol))

# Summary and save
summary(mod_genlh)
saveRDS(summary(mod_genlh), file = file.path("output", paste0(mod_name, "_summary.RDS")))

# Verify that summary was saved
if (file.exists(file.path("output", paste0(mod_name, "_summary.RDS")))) {
  message("Model summary successfully saved to the 'output' folder.")
} else {
  warning("Failed to save summary. Please check permissions or paths.")
}

# Visual inspection of convergence
plot(mod_genlh$Sol)
plot(mod_genlh$VCV)
autocorr(mod_genlh$Sol)
autocorr(mod_genlh$VCV)

# Variance explained by phylogeny
var_phy <- mod_genlh$VCV[, "tip_label"] / (mod_genlh$VCV[, "tip_label"] + mod_genlh$VCV[, "units"])
posterior.mode(var_phy)
median(var_phy)
HPDinterval(var_phy)

# ============================
# Save diagnostic plots
# ============================
# Trace plots for mcmc.list (three runs)
pdf("output/plots/trace_plots.pdf", width = 10, height = 8)
plot(mcmc.list(models[[1]]$Sol, models[[2]]$Sol, models[[3]]$Sol))
dev.off()

# Trace plots for a single model (fixed effects / random-effect variances)
pdf("output/plots/mod_genlh_Sol_trace.pdf", width = 10, height = 6); plot(mod_genlh$Sol); dev.off()
pdf("output/plots/mod_genlh_VCV_trace.pdf", width = 10, height = 6); plot(mod_genlh$VCV); dev.off()

# Autocorrelation plots
pdf("output/plots/mod_genlh_Sol_autocorr.pdf", width = 8, height = 6); autocorr.plot(mod_genlh$Sol); dev.off()
pdf("output/plots/mod_genlh_VCV_autocorr.pdf", width = 8, height = 6); autocorr.plot(mod_genlh$VCV); dev.off()

# ============================
# Save beta summary table
# ============================
library(mcmcR2)

mod_genlh %>%
  summary() %$%
  solutions %>%
  as.data.frame() %>%
  tibble::rownames_to_column("components") %>%
  mutate(post_median = apply(mod_genlh$Sol, 2, median)) %>%
  mutate(post_mode   = posterior.mode(mod_genlh$Sol)) %>%
  .[c(1, 2, 7, 8, 3:6)] %>%
  rename(
    post_mean = post.mean,
    lower     = "l-95% CI",
    upper     = "u-95% CI"
  ) %>%
  write_delim(file.path("output/mcmcmodels", paste0(mod_name, "_beta.txt")))

beta_genlh <- readr::read_delim(file.path("output/mcmcmodels", paste0(mod_name, "_beta.txt")), delim = " ")
